{"ast":null,"code":"import _slicedToArray from \"/Users/Wael/sniper/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _s = $RefreshSig$();\n\nimport React from \"react\";\n\nvar useAudio = function useAudio(url) {\n  _s();\n\n  // create audio only once\n  var _React$useState = React.useState(new Audio(url)),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      audio = _React$useState2[0]; // same as React.Component.forceUpdate\n  // const [, _forceUpdate] = React.useState(false);\n  // const forceUpdate = () => _forceUpdate((prevState) => !prevState);\n\n\n  React.useEffect(function () {\n    audio.play();\n    audio.addEventListener(\"play\", forceUpdate);\n    audio.addEventListener(\"pause\", forceUpdate);\n    audio.addEventListener(\"ended\", forceUpdate);\n    audio.addEventListener(\"timeupdate\", forceUpdate);\n    return function () {\n      audio.removeEventListener(\"play\", forceUpdate);\n      audio.removeEventListener(\"pause\", forceUpdate);\n      audio.removeEventListener(\"ended\", forceUpdate);\n      audio.addEventListener(\"timeupdate\", forceUpdate);\n    };\n    /**\n     * about useEffect's second argument\n     *    give nothing        => same as componentDidUpdate\n     *    give an empty array => same as componentWillMount\n     */\n  }, []);\n\n  var play = function play() {\n    console.log(1);\n    audio.play();\n  };\n\n  var pause = function pause() {\n    return audio.pause();\n  };\n\n  var jump = function jump(value) {\n    return audio.currentTime += value;\n  };\n\n  return [!audio.paused, audio.currentTime, play, pause, jump];\n};\n\n_s(useAudio, \"HBBqMcx7vCloL90h2Qki2iVMyeo=\");\n\nexport default useAudio;","map":{"version":3,"sources":["/Users/Wael/sniper/src/useAudio.js"],"names":["React","useAudio","url","useState","Audio","audio","useEffect","play","addEventListener","forceUpdate","removeEventListener","console","log","pause","jump","value","currentTime","paused"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAS;AAAA;;AACxB;AACA,wBAAgBF,KAAK,CAACG,QAAN,CAAe,IAAIC,KAAJ,CAAUF,GAAV,CAAf,CAAhB;AAAA;AAAA,MAAOG,KAAP,uBAFwB,CAIxB;AACA;AACA;;;AAEAL,EAAAA,KAAK,CAACM,SAAN,CAAgB,YAAM;AACpBD,IAAAA,KAAK,CAACE,IAAN;AACAF,IAAAA,KAAK,CAACG,gBAAN,CAAuB,MAAvB,EAA+BC,WAA/B;AACAJ,IAAAA,KAAK,CAACG,gBAAN,CAAuB,OAAvB,EAAgCC,WAAhC;AACAJ,IAAAA,KAAK,CAACG,gBAAN,CAAuB,OAAvB,EAAgCC,WAAhC;AACAJ,IAAAA,KAAK,CAACG,gBAAN,CAAuB,YAAvB,EAAqCC,WAArC;AAEA,WAAO,YAAM;AACXJ,MAAAA,KAAK,CAACK,mBAAN,CAA0B,MAA1B,EAAkCD,WAAlC;AACAJ,MAAAA,KAAK,CAACK,mBAAN,CAA0B,OAA1B,EAAmCD,WAAnC;AACAJ,MAAAA,KAAK,CAACK,mBAAN,CAA0B,OAA1B,EAAmCD,WAAnC;AACAJ,MAAAA,KAAK,CAACG,gBAAN,CAAuB,YAAvB,EAAqCC,WAArC;AACD,KALD;AAOA;AACJ;AACA;AACA;AACA;AACG,GAnBD,EAmBG,EAnBH;;AAqBA,MAAMF,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjBI,IAAAA,OAAO,CAACC,GAAR,CAAY,CAAZ;AACAP,IAAAA,KAAK,CAACE,IAAN;AACD,GAHD;;AAKA,MAAMM,KAAK,GAAG,SAARA,KAAQ;AAAA,WAAMR,KAAK,CAACQ,KAAN,EAAN;AAAA,GAAd;;AACA,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,KAAD;AAAA,WAAYV,KAAK,CAACW,WAAN,IAAqBD,KAAjC;AAAA,GAAb;;AAEA,SAAO,CAAC,CAACV,KAAK,CAACY,MAAR,EAAgBZ,KAAK,CAACW,WAAtB,EAAmCT,IAAnC,EAAyCM,KAAzC,EAAgDC,IAAhD,CAAP;AACD,CAtCD;;GAAMb,Q;;AAwCN,eAAeA,QAAf","sourcesContent":["import React from \"react\";\n\nconst useAudio = (url) => {\n  // create audio only once\n  const [audio] = React.useState(new Audio(url));\n\n  // same as React.Component.forceUpdate\n  // const [, _forceUpdate] = React.useState(false);\n  // const forceUpdate = () => _forceUpdate((prevState) => !prevState);\n\n  React.useEffect(() => {\n    audio.play();\n    audio.addEventListener(\"play\", forceUpdate);\n    audio.addEventListener(\"pause\", forceUpdate);\n    audio.addEventListener(\"ended\", forceUpdate);\n    audio.addEventListener(\"timeupdate\", forceUpdate);\n\n    return () => {\n      audio.removeEventListener(\"play\", forceUpdate);\n      audio.removeEventListener(\"pause\", forceUpdate);\n      audio.removeEventListener(\"ended\", forceUpdate);\n      audio.addEventListener(\"timeupdate\", forceUpdate);\n    };\n\n    /**\n     * about useEffect's second argument\n     *    give nothing        => same as componentDidUpdate\n     *    give an empty array => same as componentWillMount\n     */\n  }, []);\n\n  const play = () => {\n    console.log(1);\n    audio.play();\n  };\n\n  const pause = () => audio.pause();\n  const jump = (value) => (audio.currentTime += value);\n\n  return [!audio.paused, audio.currentTime, play, pause, jump];\n};\n\nexport default useAudio;\n"]},"metadata":{},"sourceType":"module"}